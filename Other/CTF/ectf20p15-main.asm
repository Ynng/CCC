; ---------------------------------------------------------------------------

Elf64_Sym       struc ; (sizeof=0x18, align=0x8, mappedto_1)
                                        ; XREF: LOAD:0000000000000328/r
                                        ; LOAD:0000000000000340/r ...
st_name         dd ?                    ; offset (000003E8)
st_info         db ?
st_other        db ?
st_shndx        dw ?
st_value        dq ?                    ; offset (00000000)
st_size         dq ?
Elf64_Sym       ends

; ---------------------------------------------------------------------------

Elf64_Rela      struc ; (sizeof=0x18, align=0x8, copyof_2)
                                        ; XREF: LOAD:00000000000004D0/r
                                        ; LOAD:00000000000004E8/r ...
r_offset        dq ?
r_info          dq ?
r_addend        dq ?
Elf64_Rela      ends

; ---------------------------------------------------------------------------

Elf64_Dyn       struc ; (sizeof=0x10, align=0x8, copyof_3)
                                        ; XREF: LOAD:_DYNAMIC/r
                                        ; LOAD:0000000000003DF8/r ...
d_tag           dq ?
d_un            dq ?
Elf64_Dyn       ends


;
; +-------------------------------------------------------------------------+
; |   This file has been generated by The Interactive Disassembler (IDA)    |
; |           Copyright (c) 2017 Hex-Rays, <support@hex-rays.com>           |
; |                      License info: 48-3FBD-7F04-2C                      |
; |                      Jiang Ying, Personal license                       |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 2DB3FB23BABC2B855A7A25FD191B19FF053AE37B7363ED08BBA366F8CA3A052E
; Input MD5    : 4911EEB24D5715F184BDDAFDAE46DA3C
; Input CRC32  : 11F74798

; File Name   : F:\GitHub\Practice\Other\CTF\ectf20p15-main
; Format      : ELF64 for x86-64 (Shared object)
; Interpreter '/lib64/ld-linux-x86-64.so.2'
; Needed Library 'libm.so.6'
; Needed Library 'libc.so.6'
;
; Source File : 'init.c'
; Source File : 'crtstuff.c'
; Source File : 'main.c'
; Source File : 'crtstuff.c'

                .686p
                .mmx
                .model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
LOAD            segment mempage public 'DATA' use64
                assume cs:LOAD
dword_0         dd 464C457Fh            ; DATA XREF: LOAD:0000000000000340↓o
                                        ; LOAD:0000000000000358↓o ...
                                        ; File format: \x7FELF
                db 2                    ; File class: 64-bit
                db 1                    ; Data encoding: little-endian
                db 1                    ; File version
                db 0                    ; OS/ABI: UNIX System V ABI
                db 0                    ; ABI Version
                db 7 dup(0)             ; Padding
                dw 3                    ; File type: Shared object
                dw 3Eh                  ; Machine: x86-64
                dd 1                    ; File version
                dq offset _start        ; Entry point
                dq 40h                  ; PHT file offset
                dq 39B8h                ; SHT file offset
                dd 0                    ; Processor-specific flags
                dw 40h                  ; ELF header size
                dw 38h                  ; PHT entry size
                dw 0Bh                  ; Number of entries in PHT
                dw 40h                  ; SHT entry size
                dw 1Dh                  ; Number of entries in SHT
                dw 1Ch                  ; SHT entry index for string table
; ELF64 Program Header
; PHT Entry 0
dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
                                        ; Type: PHDR
                dd 4                    ; Flags
                dq 40h                  ; File offset
                dq offset dword_40      ; Virtual address
                dq 40h                  ; Physical address
                dq 268h                 ; Size in file image
                dq 268h                 ; Size in memory image
                dq 8                    ; Alignment
; PHT Entry 1
                dd 3                    ; Type: INTERP
                dd 4                    ; Flags
                dq 2A8h                 ; File offset
                dq offset aLib64LdLinuxX8 ; Virtual address
                dq 2A8h                 ; Physical address
                dq 1Ch                  ; Size in file image
                dq 1Ch                  ; Size in memory image
                dq 1                    ; Alignment
; PHT Entry 2
                dd 1                    ; Type: LOAD
                dd 4                    ; Flags
                dq 0                    ; File offset
                dq 0                    ; Virtual address
                dq 0                    ; Physical address
                dq 5C0h                 ; Size in file image
                dq 5C0h                 ; Size in memory image
                dq 1000h                ; Alignment
; PHT Entry 3
                dd 1                    ; Type: LOAD
                dd 5                    ; Flags
                dq 1000h                ; File offset
                dq offset _init_proc    ; Virtual address
                dq 1000h                ; Physical address
                dq 4E5h                 ; Size in file image
                dq 4E5h                 ; Size in memory image
                dq 1000h                ; Alignment
; PHT Entry 4
                dd 1                    ; Type: LOAD
                dd 4                    ; Flags
                dq 2000h                ; File offset
                dq offset _IO_stdin_used ; Virtual address
                dq 2000h                ; Physical address
                dq 140h                 ; Size in file image
                dq 140h                 ; Size in memory image
                dq 1000h                ; Alignment
; PHT Entry 5
                dd 1                    ; Type: LOAD
                dd 6                    ; Flags
                dq 2DD8h                ; File offset
                dq offset __frame_dummy_init_array_entry ; Virtual address
                dq 3DD8h                ; Physical address
                dq 260h                 ; Size in file image
                dq 2D8h                 ; Size in memory image
                dq 1000h                ; Alignment
; PHT Entry 6
                dd 2                    ; Type: DYNAMIC
                dd 6                    ; Flags
                dq 2DE8h                ; File offset
                dq offset _DYNAMIC      ; Virtual address
                dq 3DE8h                ; Physical address
                dq 1F0h                 ; Size in file image
                dq 1F0h                 ; Size in memory image
                dq 8                    ; Alignment
; PHT Entry 7
                dd 4                    ; Type: NOTE
                dd 4                    ; Flags
                dq 2C4h                 ; File offset
                dq offset unk_2C4       ; Virtual address
                dq 2C4h                 ; Physical address
                dq 44h                  ; Size in file image
                dq 44h                  ; Size in memory image
                dq 4                    ; Alignment
; PHT Entry 8
                dd 6474E550h            ; Type: EH_FRAME
                dd 4                    ; Flags
                dq 2004h                ; File offset
                dq offset __GNU_EH_FRAME_HDR ; Virtual address
                dq 2004h                ; Physical address
                dq 3Ch                  ; Size in file image
                dq 3Ch                  ; Size in memory image
                dq 4                    ; Alignment
; PHT Entry 9
                dd 6474E551h            ; Type: STACK
                dd 6                    ; Flags
                dq 0                    ; File offset
                dq 0                    ; Virtual address
                dq 0                    ; Physical address
                dq 0                    ; Size in file image
                dq 0                    ; Size in memory image
                dq 10h                  ; Alignment
; PHT Entry 10
                dd 6474E552h            ; Type: RO-AFTER
                dd 4                    ; Flags
                dq 2DD8h                ; File offset
                dq offset __frame_dummy_init_array_entry ; Virtual address
                dq 3DD8h                ; Physical address
                dq 228h                 ; Size in file image
                dq 228h                 ; Size in memory image
                dq 1                    ; Alignment
aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
                                        ; DATA XREF: LOAD:0000000000000088↑o
unk_2C4         db    4                 ; DATA XREF: LOAD:00000000000001D8↑o
                db    0
                db    0
                db    0
                db  14h
                db    0
                db    0
                db    0
                db    3
                db    0
                db    0
                db    0
                db  47h ; G
                db  4Eh ; N
                db  55h ; U
                db    0
                db 0E7h
                db 0EFh
                db  4Ch ; L
                db 0E9h
                db  83h
                db  13h
                db  52h ; R
                db 0F3h
                db  63h ; c
                db 0CBh
                db  8Dh
                db  40h ; @
                db  3Eh ; >
                db  9Fh
                db 0FFh
                db  49h ; I
                db 0F1h
                db  21h ; !
                db  99h
                db  76h ; v
                db    4
                db    0
                db    0
                db    0
                db  10h
                db    0
                db    0
                db    0
                db    1
                db    0
                db    0
                db    0
                db  47h ; G
                db  4Eh ; N
                db  55h ; U
                db    0
                db    0
                db    0
                db    0
                db    0
                db    3
                db    0
                db    0
                db    0
                db    2
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
; ELF GNU Hash Table
elf_gnu_hash_nbuckets dd 1
elf_gnu_hash_symbias dd 1
elf_gnu_hash_bitmask_nwords dd 1
elf_gnu_hash_shift dd 0
elf_gnu_hash_indexes dq 0
elf_gnu_hash_bucket dd 0
elf_gnu_hash_chain dd 0
; ELF Symbol Table
                Elf64_Sym <0>
                Elf64_Sym <offset aPutchar - offset unk_3E8, 12h, 0, 0, \ ; "putchar"
                           offset dword_0, 0>
                Elf64_Sym <offset aItmDeregistert - offset unk_3E8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
                           offset dword_0, 0>
                Elf64_Sym <offset aLibcStartMain - offset unk_3E8, 12h, 0, 0, \ ; "__libc_start_main"
                           offset dword_0, 0>
                Elf64_Sym <offset aGmonStart - offset unk_3E8, 20h, 0, 0, \ ; "__gmon_start__"
                           offset dword_0, 0>
                Elf64_Sym <offset aItmRegistertmc - offset unk_3E8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
                           offset dword_0, 0>
                Elf64_Sym <offset aSqrt - offset unk_3E8, 12h, 0, 0, offset dword_0, \ ; "sqrt"
                           0>
                Elf64_Sym <offset aCxaFinalize - offset unk_3E8, 22h, 0, 0, \ ; "__cxa_finalize"
                           offset dword_0, 0>
; ELF String Table
unk_3E8         db    0                 ; DATA XREF: LOAD:0000000000000340↑o
                                        ; LOAD:0000000000000358↑o ...
aLibmSo6        db 'libm.so.6',0
aItmDeregistert db '_ITM_deregisterTMCloneTable',0
                                        ; DATA XREF: LOAD:0000000000000358↑o
aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000388↑o
aItmRegistertmc db '_ITM_registerTMCloneTable',0
                                        ; DATA XREF: LOAD:00000000000003A0↑o
aSqrt           db 'sqrt',0             ; DATA XREF: LOAD:00000000000003B8↑o
aLibcSo6        db 'libc.so.6',0
aPutchar        db 'putchar',0          ; DATA XREF: LOAD:0000000000000340↑o
aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000003D0↑o
aLibcStartMain  db '__libc_start_main',0
                                        ; DATA XREF: LOAD:0000000000000370↑o
aGlibc225       db 'GLIBC_2.2.5',0
                db    0
                db    0
                db    2
                db    0
                db    0
                db    0
                db    2
                db    0
                db    0
                db    0
                db    0
                db    0
                db    3
                db    0
                db    2
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
                db    0
                db    0
                db  10h
                db    0
                db    0
                db    0
                db  20h
                db    0
                db    0
                db    0
                db  75h ; u
                db  1Ah
                db  69h ; i
                db    9
                db    0
                db    0
                db    3
                db    0
                db  88h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db    0
                db    1
                db    0
                db  55h ; U
                db    0
                db    0
                db    0
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  75h ; u
                db  1Ah
                db  69h ; i
                db    9
                db    0
                db    0
                db    2
                db    0
                db  88h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
; ELF RELA Relocation Table
                Elf64_Rela <3DD8h, 8, 1140h> ; R_X86_64_RELATIVE
                Elf64_Rela <3DE0h, 8, 10F0h> ; R_X86_64_RELATIVE
                Elf64_Rela <4030h, 8, 4030h> ; R_X86_64_RELATIVE
                Elf64_Rela <3FD8h, 200000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
                Elf64_Rela <3FE0h, 300000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
                Elf64_Rela <3FE8h, 400000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
                Elf64_Rela <3FF0h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
                Elf64_Rela <3FF8h, 700000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
; ELF JMPREL Relocation Table
                Elf64_Rela <4018h, 100000007h, 0> ; R_X86_64_JUMP_SLOT putchar
                Elf64_Rela <4020h, 600000007h, 0> ; R_X86_64_JUMP_SLOT sqrt
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_init           segment dword public 'CODE' use64
                assume cs:_init
                ;org 1000h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


                public _init_proc
_init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
                                        ; DATA XREF: LOAD:00000000000000F8↑o
                endbr64                 ; _init
                sub     rsp, 8
                mov     rax, cs:__gmon_start___ptr
                test    rax, rax
                jz      short loc_1016
                call    rax ; __gmon_start__

loc_1016:                               ; CODE XREF: _init_proc+12↑j
                add     rsp, 8
                retn
_init_proc      endp

_init           ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment mempage public 'CODE' use64
                assume cs:LOAD
                ;org 101Bh
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 20h
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_plt            segment para public 'CODE' use64
                assume cs:_plt
                ;org 1020h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


sub_1020        proc near               ; CODE XREF: .plt:000000000000103B↓j
                                        ; .plt:000000000000104B↓j
; __unwind {
                push    cs:qword_4008
                jmp     cs:qword_4010
sub_1020        endp

; ---------------------------------------------------------------------------
                align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _putchar. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    0
                jmp     sub_1020
; [00000006 BYTES: COLLAPSED FUNCTION _sqrt. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    1
                jmp     sub_1020
; } // starts at 1020
_plt            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_text           segment para public 'CODE' use64
                assume cs:_text
                ;org 1050h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================

; Attributes: noreturn

                public _start
_start          proc near               ; DATA XREF: LOAD:0000000000000018↑o
; __unwind {
                endbr64
                xor     ebp, ebp
                mov     r9, rdx         ; rtld_fini
                pop     rsi             ; argc
                mov     rdx, rsp        ; ubp_av
                and     rsp, 0FFFFFFFFFFFFFFF0h
                push    rax
                push    rsp             ; stack_end
                lea     r8, __libc_csu_fini ; fini
                lea     rcx, __libc_csu_init ; init
                lea     rdi, main       ; main
                call    cs:__libc_start_main_ptr
                hlt
; } // starts at 1050
_start          endp

; ---------------------------------------------------------------------------
                align 20h

; =============== S U B R O U T I N E =======================================


deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1118↓p
                lea     rdi, __bss_start
                lea     rax, __bss_start
                cmp     rax, rdi
                jz      short locret_10A8
                mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
                test    rax, rax
                jz      short locret_10A8
                jmp     rax
; ---------------------------------------------------------------------------
                align 8

locret_10A8:                            ; CODE XREF: deregister_tm_clones+11↑j
                                        ; deregister_tm_clones+1D↑j
                retn
deregister_tm_clones endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


register_tm_clones proc near            ; CODE XREF: frame_dummy+4↓j
                lea     rdi, __bss_start
                lea     rsi, __bss_start
                sub     rsi, rdi
                mov     rax, rsi
                shr     rsi, 3Fh
                sar     rax, 3
                add     rsi, rax
                sar     rsi, 1
                jz      short locret_10E8
                mov     rax, cs:_ITM_registerTMCloneTable_ptr
                test    rax, rax
                jz      short locret_10E8
                jmp     rax
; ---------------------------------------------------------------------------
                align 8

locret_10E8:                            ; CODE XREF: register_tm_clones+22↑j
                                        ; register_tm_clones+2E↑j
                retn
register_tm_clones endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


__do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
                endbr64
                cmp     cs:completed_0, 0
                jnz     short locret_1130
                push    rbp
                cmp     cs:__cxa_finalize_ptr, 0
                mov     rbp, rsp
                jz      short loc_1118
                mov     rdi, cs:__dso_handle ; void *
                call    cs:__cxa_finalize_ptr

loc_1118:                               ; CODE XREF: __do_global_dtors_aux+19↑j
                call    deregister_tm_clones
                mov     cs:completed_0, 1
                pop     rbp
                retn
; ---------------------------------------------------------------------------
                align 10h

locret_1130:                            ; CODE XREF: __do_global_dtors_aux+B↑j
                retn
__do_global_dtors_aux endp

; ---------------------------------------------------------------------------
                align 20h

; =============== S U B R O U T I N E =======================================


frame_dummy     proc near               ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
                endbr64
                jmp     register_tm_clones
frame_dummy     endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; __int64 __fastcall f(signed int x, __int64 y, __int64 z)
                public f
f               proc near               ; CODE XREF: f+25↓p
                                        ; f+34↓p ...

var_14          = dword ptr -14h
var_8           = qword ptr -8

; __unwind {
                push    rbp
                mov     rbp, rsp
                push    rbx
                sub     rsp, 18h
                mov     [rbp+var_14], edi
                cmp     [rbp+var_14], 3
                jg      short loc_1166  ; jump if greater
                mov     eax, [rbp+var_14]
                add     eax, 5
                jmp     loc_11ED
; ---------------------------------------------------------------------------

loc_1166:                               ; CODE XREF: f+10↑j
                mov     eax, [rbp+var_14]
                sub     eax, 1
                mov     edi, eax
                call    f
                mov     ebx, eax
                mov     eax, [rbp+var_14]
                sub     eax, 5
                mov     edi, eax
                call    f
                add     ebx, eax
                mov     eax, [rbp+var_14]
                movsxd  rdx, eax
                imul    rdx, 55555556h
                shr     rdx, 20h
                sar     eax, 1Fh
                mov     ecx, eax
                mov     eax, edx
                sub     eax, ecx
                mov     edi, eax
                call    f
                add     eax, eax
                add     ebx, eax
                pxor    xmm1, xmm1
                cvtsi2sd xmm1, [rbp+var_14]
                movq    rax, xmm1
                movq    xmm0, rax       ; x
                call    _sqrt
                cvttsd2si eax, xmm0
                mov     edi, eax
                call    f
                mov     edx, eax
                mov     eax, edx
                add     eax, eax
                add     eax, edx
                add     eax, ebx
                movsxd  rdx, eax
                imul    rdx, 55555556h
                shr     rdx, 20h
                sar     eax, 1Fh
                mov     ecx, eax
                mov     eax, edx
                sub     eax, ecx

loc_11ED:                               ; CODE XREF: f+18↑j
                mov     rbx, [rbp+var_8]
                leave
                retn
; } // starts at 1149
f               endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __cdecl main(int argc, const char **argv, const char **envp)
                public main
main            proc near               ; DATA XREF: _start+21↑o

var_14          = dword ptr -14h
var_8           = qword ptr -8

; __unwind {
                push    rbp
                mov     rbp, rsp
                push    rbx
                sub     rsp, 18h
                mov     edi, 0B21Fh
                ;call    f
                mov     cs:s, 13
                mov     edi, 0BB2Eh
                ;call    f
                mov     cs:dword_4064, eax
                mov     edi, 0C41Ah
                ;call    f
                mov     cs:dword_4068, eax
                mov     edi, 0A64Bh
                ;call    f
                mov     cs:dword_406C, eax
                mov     edi, 0C0B2h
                ;call    f
                mov     cs:dword_4070, eax
                mov     edi, 0
                ;call    f
                mov     ebx, eax
                mov     edi, 0E6ABh
                ;call    f
                movsxd  rdx, ebx
                lea     rcx, ds:0[rdx*4]
                lea     rdx, s
                mov     [rcx+rdx], eax
                mov     edi, 1
                ;call    f
                mov     ebx, eax
                mov     edi, 0B5C1h
                ;call    f
                movsxd  rdx, ebx
                lea     rcx, ds:0[rdx*4]
                lea     rdx, s
                mov     [rcx+rdx], eax
                mov     edi, 2
                ;call    f
                mov     ebx, eax
                mov     edi, 0A629h
                ;call    f
                movsxd  rdx, ebx
                lea     rcx, ds:0[rdx*4]
                lea     rdx, s
                mov     [rcx+rdx], eax
                mov     edi, 3
                ;call    f
                mov     ebx, eax
                mov     edi, 0D5D5h
                ;call    f
                movsxd  rdx, ebx
                lea     rcx, ds:0[rdx*4]
                lea     rdx, s
                mov     [rcx+rdx], eax
                mov     edi, 0AB6Eh
                ;call    f
                mov     cs:dword_4084, eax
                mov     edi, 0B21Fh
                ;call    f
                mov     cs:dword_4088, eax
                mov     edi, 0BAE9h
                ;call    f
                mov     cs:dword_408C, eax
                mov     edi, 0B181h
                ;call    f
                mov     cs:dword_4090, eax
                mov     edi, 5C82h
                ;call    f
                mov     edi, eax
                ;call    f
                mov     cs:dword_4094, eax
                mov     edi, 6D02h
                ;call    f
                mov     edi, eax
                ;call    f
                mov     cs:dword_4098, eax
                mov     edi, 5
                ;call    f
                mov     ebx, eax
                mov     edi, 0B4AAh
                ;call    f
                movsxd  rdx, ebx
                lea     rcx, ds:0[rdx*4]
                lea     rdx, s
                mov     [rcx+rdx], eax
                mov     edi, 4753h
                ;call    f
                mov     cs:dword_40A0, eax
                mov     edi, 0ADC7h
                ;call    f
                mov     cs:dword_40A4, eax
                mov     edi, 0F959h
                ;call    f
                mov     cs:dword_40A8, eax
                mov     [rbp+var_14], 0
                jmp     short loc_1441
; ---------------------------------------------------------------------------

loc_13CA:                               ; CODE XREF: main+252↓j
                mov     eax, [rbp+var_14]
                cdqe
                lea     rdx, ds:0[rax*4]
                lea     rax, s
                mov     eax, [rdx+rax]
                lea     edx, [rax+0FFh]
                test    eax, eax
                cmovs   eax, edx
                sar     eax, 8
                mov     edi, eax        ; c
                call    _putchar
                mov     eax, [rbp+var_14]
                cdqe
                lea     rdx, ds:0[rax*4]
                lea     rax, s
                mov     eax, [rdx+rax]
                movzx   eax, al
                test    eax, eax
                jz      short loc_143D
                mov     eax, [rbp+var_14]
                cdqe
                lea     rdx, ds:0[rax*4]
                lea     rax, s
                mov     eax, [rdx+rax]
                cdq
                shr     edx, 18h
                add     eax, edx
                movzx   eax, al
                sub     eax, edx
                mov     edi, eax        ; c
                call    _putchar

loc_143D:                               ; CODE XREF: main+21F↑j
                add     [rbp+var_14], 1

loc_1441:                               ; CODE XREF: main+1D5↑j
                cmp     [rbp+var_14], 12h
                jle     short loc_13CA
                mov     eax, 0
                mov     rbx, [rbp+var_8]
                leave
                retn
; } // starts at 11F3
main            endp

; ---------------------------------------------------------------------------
                align 20h

; =============== S U B R O U T I N E =======================================


; void _libc_csu_init(void)
                public __libc_csu_init
__libc_csu_init proc near               ; DATA XREF: _start+1A↑o
; __unwind {
                endbr64
                push    r15
                lea     r15, __frame_dummy_init_array_entry
                push    r14
                mov     r14, rdx
                push    r13
                mov     r13, rsi
                push    r12
                mov     r12d, edi
                push    rbp
                lea     rbp, __do_global_dtors_aux_fini_array_entry
                push    rbx
                sub     rbp, r15
                sub     rsp, 8
                call    _init_proc
                sar     rbp, 3
                jz      short loc_14B6
                xor     ebx, ebx
                nop     dword ptr [rax+00000000h]

loc_14A0:                               ; CODE XREF: __libc_csu_init+54↓j
                mov     rdx, r14
                mov     rsi, r13
                mov     edi, r12d
                call    qword ptr [r15+rbx*8]
                add     rbx, 1
                cmp     rbp, rbx
                jnz     short loc_14A0

loc_14B6:                               ; CODE XREF: __libc_csu_init+35↑j
                add     rsp, 8
                pop     rbx
                pop     rbp
                pop     r12
                pop     r13
                pop     r14
                pop     r15
                retn
; } // starts at 1460
__libc_csu_init endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


; void _libc_csu_fini(void)
                public __libc_csu_fini
__libc_csu_fini proc near               ; DATA XREF: _start+13↑o
; __unwind {
                endbr64
                retn
; } // starts at 14D0
__libc_csu_fini endp

_text           ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment mempage public 'CODE' use64
                assume cs:LOAD
                ;org 14D5h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 8
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_fini           segment dword public 'CODE' use64
                assume cs:_fini
                ;org 14D8h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


                public _term_proc
_term_proc      proc near
                endbr64                 ; _fini
                sub     rsp, 8
                add     rsp, 8
                retn
_term_proc      endp

_fini           ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_rodata         segment dword public 'CONST' use64
                assume cs:_rodata
                ;org 2000h
                public _IO_stdin_used
_IO_stdin_used  db    1                 ; DATA XREF: LOAD:0000000000000130↑o
                db    0
                db    2
                db    0
_rodata         ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_eh_frame_hdr   segment dword public 'CONST' use64
                assume cs:_eh_frame_hdr
                ;org 2004h
__GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:0000000000000210↑o
                db  1Bh
                db    3
                db  3Bh ; ;
                db  38h ; 8
                db    0
                db    0
                db    0
                db    6
                db    0
                db    0
                db    0
                db  1Ch
                db 0F0h
                db 0FFh
                db 0FFh
                db  6Ch ; l
                db    0
                db    0
                db    0
                db  4Ch ; L
                db 0F0h
                db 0FFh
                db 0FFh
                db  54h ; T
                db    0
                db    0
                db    0
                db  45h ; E
                db 0F1h
                db 0FFh
                db 0FFh
                db  94h
                db    0
                db    0
                db    0
                db 0EFh
                db 0F1h
                db 0FFh
                db 0FFh
                db 0B8h
                db    0
                db    0
                db    0
                db  5Ch ; \
                db 0F4h
                db 0FFh
                db 0FFh
                db 0DCh
                db    0
                db    0
                db    0
                db 0CCh
                db 0F4h
                db 0FFh
                db 0FFh
                db  24h ; $
                db    1
                db    0
                db    0
_eh_frame_hdr   ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_eh_frame       segment para public 'CONST' use64
                assume cs:_eh_frame
                ;org 2040h
                db  14h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db  7Ah ; z
                db  52h ; R
                db    0
                db    1
                db  78h ; x
                db  10h
                db    1
                db  1Bh
                db  0Ch
                db    7
                db    8
                db  90h
                db    1
                db    0
                db    0
                db  14h
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db 0F0h
                db 0EFh
                db 0FFh
                db 0FFh
                db  2Fh ; /
                db    0
                db    0
                db    0
                db    0
                db  44h ; D
                db    7
                db  10h
                db    0
                db    0
                db    0
                db    0
                db  24h ; $
                db    0
                db    0
                db    0
                db  34h ; 4
                db    0
                db    0
                db    0
                db 0A8h
                db 0EFh
                db 0FFh
                db 0FFh
                db  30h ; 0
                db    0
                db    0
                db    0
                db    0
                db  0Eh
                db  10h
                db  46h ; F
                db  0Eh
                db  18h
                db  4Ah ; J
                db  0Fh
                db  0Bh
                db  77h ; w
                db    8
                db  80h
                db    0
                db  3Fh ; ?
                db  1Ah
                db  3Bh ; ;
                db  2Ah ; *
                db  33h ; 3
                db  24h ; $
                db  22h ; "
                db    0
                db    0
                db    0
                db    0
                db  20h
                db    0
                db    0
                db    0
                db  5Ch ; \
                db    0
                db    0
                db    0
                db 0A9h
                db 0F0h
                db 0FFh
                db 0FFh
                db 0AAh
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db  10h
                db  86h
                db    2
                db  43h ; C
                db  0Dh
                db    6
                db  45h ; E
                db  83h
                db    3
                db    2
                db 0A0h
                db  0Ch
                db    7
                db    8
                db    0
                db    0
                db    0
                db  20h
                db    0
                db    0
                db    0
                db  80h
                db    0
                db    0
                db    0
                db  2Fh ; /
                db 0F1h
                db 0FFh
                db 0FFh
                db  5Fh ; _
                db    2
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db  10h
                db  86h
                db    2
                db  43h ; C
                db  0Dh
                db    6
                db  45h ; E
                db  83h
                db    3
                db    3
                db  55h ; U
                db    2
                db  0Ch
                db    7
                db    8
                db    0
                db    0
                db  44h ; D
                db    0
                db    0
                db    0
                db 0A4h
                db    0
                db    0
                db    0
                db  78h ; x
                db 0F3h
                db 0FFh
                db 0FFh
                db  65h ; e
                db    0
                db    0
                db    0
                db    0
                db  46h ; F
                db  0Eh
                db  10h
                db  8Fh
                db    2
                db  49h ; I
                db  0Eh
                db  18h
                db  8Eh
                db    3
                db  45h ; E
                db  0Eh
                db  20h
                db  8Dh
                db    4
                db  45h ; E
                db  0Eh
                db  28h ; (
                db  8Ch
                db    5
                db  44h ; D
                db  0Eh
                db  30h ; 0
                db  86h
                db    6
                db  48h ; H
                db  0Eh
                db  38h ; 8
                db  83h
                db    7
                db  47h ; G
                db  0Eh
                db  40h ; @
                db  6Eh ; n
                db  0Eh
                db  38h ; 8
                db  41h ; A
                db  0Eh
                db  30h ; 0
                db  41h ; A
                db  0Eh
                db  28h ; (
                db  42h ; B
                db  0Eh
                db  20h
                db  42h ; B
                db  0Eh
                db  18h
                db  42h ; B
                db  0Eh
                db  10h
                db  42h ; B
                db  0Eh
                db    8
                db    0
                db  10h
                db    0
                db    0
                db    0
                db 0ECh
                db    0
                db    0
                db    0
                db 0A0h
                db 0F3h
                db 0FFh
                db 0FFh
                db    5
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
__FRAME_END__   db    0
                db    0
                db    0
                db    0
_eh_frame       ends

; ELF Initialization Function Table
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_init_array     segment para public 'DATA' use64
                assume cs:_init_array
                ;org 3DD8h
__frame_dummy_init_array_entry dq offset frame_dummy
                                        ; DATA XREF: LOAD:0000000000000168↑o
                                        ; LOAD:0000000000000280↑o ...
_init_array     ends                    ; Alternative name is '__init_array_start'

; ELF Termination Function Table
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_fini_array     segment para public 'DATA' use64
                assume cs:_fini_array
                ;org 3DE0h
__do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
                                        ; DATA XREF: __libc_csu_init+1D↑o
_fini_array     ends                    ; Alternative name is '__init_array_end'

; ELF Dynamic Information
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
LOAD            segment mempage public 'DATA' use64
                assume cs:LOAD
                ;org 3DE8h
_DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:00000000000001A0↑o
                                        ; .got.plt:_GLOBAL_OFFSET_TABLE_↓o
                                        ; DT_NEEDED libm.so.6
                Elf64_Dyn <1, 55h>      ; DT_NEEDED libc.so.6
                Elf64_Dyn <0Ch, 1000h>  ; DT_INIT
                Elf64_Dyn <0Dh, 14D8h>  ; DT_FINI
                Elf64_Dyn <19h, 3DD8h>  ; DT_INIT_ARRAY
                Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
                Elf64_Dyn <1Ah, 3DE0h>  ; DT_FINI_ARRAY
                Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
                Elf64_Dyn <6FFFFEF5h, 308h> ; DT_GNU_HASH
                Elf64_Dyn <5, 3E8h>     ; DT_STRTAB
                Elf64_Dyn <6, 328h>     ; DT_SYMTAB
                Elf64_Dyn <0Ah, 94h>    ; DT_STRSZ
                Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
                Elf64_Dyn <15h, 0>      ; DT_DEBUG
                Elf64_Dyn <3, 4000h>    ; DT_PLTGOT
                Elf64_Dyn <2, 30h>      ; DT_PLTRELSZ
                Elf64_Dyn <14h, 7>      ; DT_PLTREL
                Elf64_Dyn <17h, 590h>   ; DT_JMPREL
                Elf64_Dyn <7, 4D0h>     ; DT_RELA
                Elf64_Dyn <8, 0C0h>     ; DT_RELASZ
                Elf64_Dyn <9, 18h>      ; DT_RELAENT
                Elf64_Dyn <6FFFFFFBh, 8000000h> ; DT_FLAGS_1
                Elf64_Dyn <6FFFFFFEh, 490h> ; DT_VERNEED
                Elf64_Dyn <6FFFFFFFh, 2> ; DT_VERNEEDNUM
                Elf64_Dyn <6FFFFFF0h, 47Ch> ; DT_VERSYM
                Elf64_Dyn <6FFFFFF9h, 3> ; DT_RELACOUNT
                Elf64_Dyn <0>           ; DT_NULL
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
LOAD            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_got            segment para public 'DATA' use64
                assume cs:_got
                ;org 3FD8h
_ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
                                        ; DATA XREF: deregister_tm_clones+13↑r
__libc_start_main_ptr dq offset __libc_start_main
                                        ; DATA XREF: _start+28↑r
__gmon_start___ptr dq offset __gmon_start__
                                        ; DATA XREF: _init_proc+8↑r
_ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
                                        ; DATA XREF: register_tm_clones+24↑r
__cxa_finalize_ptr dq offset __cxa_finalize
                                        ; DATA XREF: __do_global_dtors_aux+E↑r
                                        ; __do_global_dtors_aux+22↑r
_got            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_got_plt        segment para public 'DATA' use64
                assume cs:_got_plt
                ;org 4000h
_GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
qword_4008      dq 0                    ; DATA XREF: sub_1020↑r
qword_4010      dq 0                    ; DATA XREF: sub_1020+6↑r
off_4018        dq offset putchar       ; DATA XREF: _putchar↑r
off_4020        dq offset sqrt          ; DATA XREF: _sqrt↑r
_got_plt        ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data           segment para public 'DATA' use64
                assume cs:_data
                ;org 4028h
                public __data_start ; weak
__data_start    db    0                 ; Alternative name is '__data_start'
                                        ; data_start
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                public __dso_handle
; void *_dso_handle
__dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+1B↑r
                                        ; .data:__dso_handle↓o
_data           ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
LOAD            segment mempage public 'DATA' use64
                assume cs:LOAD
                ;org 4038h
                public __bss_start
__bss_start     db    ? ;               ; DATA XREF: deregister_tm_clones↑o
                                        ; deregister_tm_clones+7↑o ...
                                        ; Alternative name is '_edata'
                                        ; __TMC_END__
                                        ; _edata
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
LOAD            ends

; ===========================================================================

; Segment type: Uninitialized
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_bss            segment para public 'BSS' use64
                assume cs:_bss
                ;org 4040h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
completed_0     db ?                    ; DATA XREF: __do_global_dtors_aux+4↑r
                                        ; __do_global_dtors_aux+2D↑w
                align 20h
                public s
; int s[]
s               dd ?                    ; DATA XREF: main+13↑w
                                        ; main+7A↑o ...
dword_4064      dd ?                    ; DATA XREF: main+23↑w
dword_4068      dd ?                    ; DATA XREF: main+33↑w
dword_406C      dd ?                    ; DATA XREF: main+43↑w
dword_4070      dd ?                    ; DATA XREF: main+53↑w
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
dword_4084      dd ?                    ; DATA XREF: main+10F↑w
dword_4088      dd ?                    ; DATA XREF: main+11F↑w
dword_408C      dd ?                    ; DATA XREF: main+12F↑w
dword_4090      dd ?                    ; DATA XREF: main+13F↑w
dword_4094      dd ?                    ; DATA XREF: main+156↑w
dword_4098      dd ?                    ; DATA XREF: main+16D↑w
                align 20h
dword_40A0      dd ?                    ; DATA XREF: main+1A8↑w
dword_40A4      dd ?                    ; DATA XREF: main+1B8↑w
dword_40A8      dd ?                    ; DATA XREF: main+1C8↑w
                align 10h
_bss            ends

; ===========================================================================

; Segment type: Zero-length
_prgend         segment byte public '' use64
_end            label byte
_prgend         ends

; ===========================================================================

; Segment type: Externs
; extern
; int putchar(int c)
                extrn putchar:near      ; DATA XREF: .got.plt:off_4018↑o
; int __cdecl _libc_start_main(int (__cdecl *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
                extrn __libc_start_main:near
                                        ; CODE XREF: _start+28↑p
                                        ; DATA XREF: .got:__libc_start_main_ptr↑o
; double sqrt(double x)
                extrn sqrt:near         ; DATA XREF: .got.plt:off_4020↑o
; int __cdecl _cxa_finalize(void *)
                extrn __cxa_finalize:near ; weak
                                        ; CODE XREF: __do_global_dtors_aux+22↑p
                                        ; DATA XREF: .got:__cxa_finalize_ptr↑o
                extrn _ITM_deregisterTMCloneTable ; weak
                                        ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
                extrn __gmon_start__:near ; weak
                                        ; CODE XREF: _init_proc+14↑p
                                        ; DATA XREF: .got:__gmon_start___ptr↑o
                extrn _ITM_registerTMCloneTable ; weak
                                        ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o


                end _start
